#!/usr/bin/env ruby
# mercurial

# 20250926
# 0.5.1

# Changes since 0.4:
# -/0: Be able to set DNS.
# 1. + require 'switches.rb'
# 2. + switches(), dns_servers(): Parse DNS servers from command line (-d/--dns/--dns_server)
# 3. ~ up(), switch(), main(): Accept and pass through DNS servers argument.
# 4. + dns_altered_wireguard_config(): Modifies Wireguard config to use custom DNS servers.
# 5. + write_dns_altered_wireguard_config(): Creates a temporary config with custom DNS.
# 6. ~ down(): Clean up /tmp/wireguard/*.conf files.
# 7. ~ *_filename()/*_filepath()/
# 8. + require 'MacOS/VPN'
# 9. ~ up(): Use MacOS::VPN.up?
# 0/1: Fix exit node repetition bug.
# 10. + wireguard_configs(): Return config basenames only.
# 11. + random_wireguard_config(): Select random config by basename, properly excluding current.
# 12. ~ random_wireguard_config_filepath(): Use basename-based selection to build filepath.
# 13. ~ up(): Eliminate conditional duplication by reassigning wireguard_config_filepath.

# Examples:
# 1. `mercurial setup` installs requisite software.
# 2. `mercurial switch` brings up the VPN, if need be, or if already up with swap the current for another different exit node.
# 3. `mercurial` is the same as `mercurial switch`.
# 4. `mercurial down` brings the VPN down.
# 5. `mercurial switch --dns_servers 1.1.1.1,1.0.0.1` brings up the VPN with the given DNS servers.

require 'fileutils'
require 'switches.rb'

require 'FileUtils/which'
require 'Kernel/run'
require 'MacOS/IfConfig'
require 'MacOS/VPN'

def setup
  unless homebrew_installed?
    run('/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"', show: true)
  end
  unless wireguard_tools_installed?
    run('brew install wireguard-tools', show: true)
  end
end

def homebrew_installed?
  FileUtils.which('brew')
end

def wireguard_tools_installed?
  FileUtils.which('wg-quick')
end

def check_for_wg_quick_program
  unless wireguard_tools_installed?
    puts "wg-quick was not found.  You must install wireguard-tools (installs wg-quick) first."
    puts "The easist way to install it is by running `mercurial setup`."
    exit
  end
end

def wireguard_config_location
  File.join(%w{~ .config wireguard})
end

def wireguard_configs_path
  File.expand_path(wireguard_config_location)
end

def wireguard_configs_filepaths
  Dir.glob("#{wireguard_configs_path}/*.conf")
end

def wireguard_configs
  wireguard_configs_filepaths.collect{|fp| File.basename(fp)}
end

def random_wireguard_config
  current_wireguard_config = File.basename(current_wireguard_config_filepath)
  non_current_wireguard_configs = (
    if current_wireguard_config
      (wireguard_configs - [current_wireguard_config])
    else
      wireguard_configs_filepaths
    end
  )
  non_current_wireguard_configs.sample
end

def random_wireguard_config_filepath
  File.join(wireguard_configs_path, random_wireguard_config)
end

def load_wireguard_config(wireguard_config_filename)
  run("wg-quick up #{wireguard_config_filename}", show: true)
end

def unload_wireguard_config(wireguard_config_filename)
  run("wg-quick down #{wireguard_config_filename}", show: true)
end

def write_dns_altered_wireguard_config(wireguard_config_filepath, dns_altered_wireguard_config)
  wireguard_config_filename = File.basename(wireguard_config_filepath)
  FileUtils.mkdir_p('/tmp/wireguard')
  dns_altered_wireguard_config_filepath = "/tmp/wireguard/#{wireguard_config_filename}"
  wireguard_config = File.open(dns_altered_wireguard_config_filepath, 'w', 0o600)
  wireguard_config.puts(dns_altered_wireguard_config)
  wireguard_config.close
  dns_altered_wireguard_config_filepath
end

def dns_altered_wireguard_config(wireguard_config_filepath, dns_servers)
  config = File.read(wireguard_config_filepath)
  config.gsub(/^DNS = .+$/, "DNS = #{dns_servers.join(', ')}")
end

def up(dns_servers = nil)
  wireguard_config_filepath = random_wireguard_config_filepath
  if dns_servers
    dns_altered_wireguard_config = dns_altered_wireguard_config(wireguard_config_filepath, dns_servers)
    wireguard_config_filepath = write_dns_altered_wireguard_config(wireguard_config_filepath, dns_altered_wireguard_config)
  end
  load_wireguard_config(wireguard_config_filepath)
  tmpfile = File.open("/tmp/mercurial-#{Time.now}.tmp", 'w')
  tmpfile.print(wireguard_config_filepath)
  tmpfile.close
end

def current_wireguard_config_filepath
  @current_wireguard_config_filepath ||= (
    if tmpfilename = Dir.glob('/tmp/mercurial-*.tmp').last
      File.read(tmpfilename)
    end
  )
end

def down
  if current_wireguard_config_filepath
    unload_wireguard_config(current_wireguard_config_filepath)
  else
    wireguard_configs_filepaths.each do |wireguard_config_filepath|
      unload_wireguard_config(wireguard_config_filepath)
      break if $?.exitstatus == 0
    end
  end
  Dir.glob('/tmp/mercurial-*.tmp').each{|filename| FileUtils.rm(filename)}
  Dir.glob('/tmp/wireguard/*.conf').each{|filename| FileUtils.rm(filename)}
end

def switch(dns_servers = nil)
  check_for_wg_quick_program
  down if up?
  up(dns_servers)
end

def up?
  MacOS::VPN.up?
end

def switches
  @switches ||= (
    Switches.new do |s|
      s.set :d, :dns, :dns_servers
    end
  )
end

def dns_servers
  switches.dns_servers&.split(',')
end

def main
  switches
  case ARGV[0]
  when 'setup'; setup
  when 'down'; down if up?
  when 'switch'; switch(dns_servers)
  else
    switch(dns_servers)
  end
end

main
