#!/usr/bin/env ruby
# mercurial

# 20251015
# 0.7.0

# Changes since 0.6:
# -/0: Allow selection of wireguard config by full path, complete config filename, or partial filepath.
# 1. ~ switches(): + :c, :config
# 2. ~ main(): Pass switches.config to switch.
# 3. ~ switch(): Add conditions to check for the presence of a suppled config, whether it is a full path, or a complete config filename or partial filepath.
# 4. ~ main(): Fix sub-commandless operation.

# Examples:
# 1. `mercurial setup` installs requisite software.
# 2. `mercurial switch` brings up the VPN, if need be, or if already up with swap the current for another different endpoint.
# 3. `mercurial` is the same as `mercurial switch`.
# 4. `mercurial down` brings the VPN down.
# 5. `mercurial switch --dns_servers 1.1.1.1,1.0.0.1` drops, then brings up the VPN with the given DNS servers.
# 6. `mercurial switch --dns_servers 1.1.1.1,1.0.0.1 --retain_endpoint` drops, then brings up the VPN with the given DNS servers without switching endpoints.
# 7. `mercurial switch --config /full/path/to/config.conf`
# 8. `mercurial switch --config ~/config.conf`
# 9. `mercurial switch --config config.conf` assumes the default configs path
# 10. `mercurial switch --config config` will do a partial match in the default path

# Notes:
# 1. For automated execution, ensure that /etc/sudoers has an entry like this:
#   thoran    ALL = NOPASSWD: /opt/homebrew/bin/wg-quick *
# 2. Or, that there's a file /etc/sudoers.d/mercurial with the same kind of entry:
#   thoran    ALL = NOPASSWD: /opt/homebrew/bin/wg-quick *

require 'fileutils'
require 'switches.rb'

require 'FileUtils/which'
require 'Kernel/run'
require 'MacOS/IfConfig'
require 'MacOS/VPN'

def wg_quick_path
  @wg_quick_path ||= FileUtils.which('wg-quick')
end

def setup
  unless homebrew_installed?
    run('/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"', show: true)
  end
  unless wireguard_tools_installed?
    run('brew install wireguard-tools', show: true)
  end
end

def homebrew_installed?
  FileUtils.which('brew')
end

def wireguard_tools_installed?
  wg_quick_path
end

def check_for_wg_quick_program
  unless wireguard_tools_installed?
    puts "wg-quick was not found.  You must install wireguard-tools (installs wg-quick) first."
    puts "The easist way to install it is by running `mercurial setup`."
    exit
  end
end

def wireguard_config_location
  File.join(%w{~ .config wireguard})
end

def wireguard_configs_path
  File.expand_path(wireguard_config_location)
end

def wireguard_configs_filepaths
  Dir.glob("#{wireguard_configs_path}/*.conf")
end

def wireguard_configs
  wireguard_configs_filepaths.collect{|fp| File.basename(fp)}
end

def random_wireguard_config
  non_current_wireguard_configs = (
    if current_wireguard_config
      (wireguard_configs - [current_wireguard_config])
    else
      wireguard_configs
    end
  )
  non_current_wireguard_configs.sample
end

def random_wireguard_config_filepath
  File.join(wireguard_configs_path, random_wireguard_config)
end

def load_wireguard_config(wireguard_config_filename)
  run('sudo', wg_quick_path, 'up', wireguard_config_filename, show: true)
end

def unload_wireguard_config(wireguard_config_filename)
  run('sudo', wg_quick_path, 'down', wireguard_config_filename, show: true)
end

def write_dns_altered_wireguard_config(wireguard_config_filepath, dns_altered_wireguard_config)
  wireguard_config_filename = File.basename(wireguard_config_filepath)
  FileUtils.mkdir_p('/tmp/wireguard')
  dns_altered_wireguard_config_filepath = "/tmp/wireguard/#{wireguard_config_filename}"
  wireguard_config = File.open(dns_altered_wireguard_config_filepath, 'w', 0o600)
  wireguard_config.puts(dns_altered_wireguard_config)
  wireguard_config.close
  dns_altered_wireguard_config_filepath
end

def dns_altered_wireguard_config(wireguard_config_filepath, dns_servers)
  config = File.read(wireguard_config_filepath)
  config.gsub(/^DNS = .+$/, "DNS = #{dns_servers.join(', ')}")
end

def up(dns_servers = nil, wireguard_config = nil)
  wireguard_config_filepath = (
    if wireguard_config
      File.join(wireguard_configs_path, wireguard_config)
    else
      random_wireguard_config_filepath
    end
  )
  if dns_servers
    dns_altered_wireguard_config = dns_altered_wireguard_config(wireguard_config_filepath, dns_servers)
    wireguard_config_filepath = write_dns_altered_wireguard_config(wireguard_config_filepath, dns_altered_wireguard_config)
  end
  load_wireguard_config(wireguard_config_filepath)
  tmpfile = File.open("/tmp/mercurial-#{Time.now}.tmp", 'w')
  tmpfile.print(wireguard_config_filepath)
  tmpfile.close
end

def current_wireguard_config_filepath
  @current_wireguard_config_filepath ||= (
    if tmpfilename = Dir.glob('/tmp/mercurial-*.tmp').last
      File.read(tmpfilename)
    end
  )
end

def current_wireguard_config
  File.basename(current_wireguard_config_filepath) if current_wireguard_config_filepath
end

def down
  if current_wireguard_config_filepath
    unload_wireguard_config(current_wireguard_config_filepath)
  else
    wireguard_configs_filepaths.each do |wireguard_config_filepath|
      unload_wireguard_config(wireguard_config_filepath)
      break if $?.exitstatus == 0
    end
  end
  Dir.glob('/tmp/mercurial-*.tmp').each{|filename| FileUtils.rm(filename)}
  Dir.glob('/tmp/wireguard/*.conf').each{|filename| FileUtils.rm(filename)}
end

def switch(dns_servers = nil, config: nil, retain_endpoint: false)
  check_for_wg_quick_program
  if up?
    if retain_endpoint
      wireguard_config = current_wireguard_config
    end
    down
  end
  if config
    wireguard_config = (
      if config =~ /\//
        if File.exist?(config)
          File.basename(config)
        else
          puts "#{config} not found."
          exit
        end
      else
        candidate_config = File.join(wireguard_configs_path, config)
        if File.exist?(candidate_config)
          config
        else
          File.basename(wireguard_configs_filepaths.detect{|filepath| File.basename(filepath) =~ /#{config}/i})
        end
      end
    )
  end
  up(dns_servers, wireguard_config)
end

def up?
  MacOS::VPN.up?
end

def switches
  @switches ||= (
    Switches.new do |s|
      s.set :d, :dns, :dns_servers
      s.set :c, :config
      s.set :r?, :retain?, :retain_endpoint?
    end
  )
end

def dns_servers
  switches.dns_servers&.split(',')
end

def main
  switches
  case ARGV[0]
  when 'setup'; setup
  when 'down'; down if up?
  when 'switch'; switch(dns_servers, config: switches.config, retain_endpoint: switches.retain_endpoint?)
  else
    switch(dns_servers, config: switches.config, retain_endpoint: switches.retain_endpoint?)
  end
end

main
